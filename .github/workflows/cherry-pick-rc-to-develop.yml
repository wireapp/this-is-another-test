name: "Cherry-pick from rc to develop"

on:
  pull_request:
    branches:
      - release/candidate
    types:
      - closed

env:
  SUBMODULE_NAME: this-is-another-test

jobs:
  cherry-pick:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Append -cherry-pick to branch name
        id: extract
        run: |
          PR_BRANCH="${{ github.event.pull_request.head.ref }}"
          NEW_BRANCH_NAME="${PR_BRANCH}-cherry-pick"
          echo "New branch name: $NEW_BRANCH_NAME"
          echo "newBranchName=$NEW_BRANCH_NAME" >> $GITHUB_ENV

      - name: Check for changes excluding submodule
        id: check_changes
        run: |
          if [[ -n "${{ env.SUBMODULE_NAME }}" ]]; then
            # If SUBMODULE_NAME is set
            NUM_CHANGES=$(git diff origin/develop --name-only | grep -v "^${{ env.SUBMODULE_NAME }}/" | wc -l)
          else
            # If SUBMODULE_NAME is not set
            NUM_CHANGES=$(git diff origin/develop --name-only | wc -l)
          fi
          if [ "$NUM_CHANGES" -gt 0 ]; then
            echo "::set-output name=shouldCherryPick::true"
          else
            if [[ -n "${{ env.SUBMODULE_NAME }}" ]]; then
              echo "No changes outside of ${{ env.SUBMODULE_NAME }} submodule, skipping cherry-pick"
            else
              echo "No changes detected, skipping cherry-pick"
            fi
            echo "::set-output name=shouldCherryPick::false"
          fi

      - uses: fregante/setup-git-user@v2

      - name: Update submodule
        if: env.SUBMODULE_NAME && steps.check_changes.outputs.shouldCherryPick == 'true'
        run: |
          set -x
          # Create a temporary branch and get the last commit message
          git checkout -b temp-branch-for-cherry-pick
          LAST_COMMIT_MESSAGE=$(git log --format=%B -n 1 ${{ github.event.pull_request.merge_commit_sha }})
          cd ${{ env.SUBMODULE_NAME }}
          git checkout develop
          git pull origin develop
          cd ..
          git add ${{ env.SUBMODULE_NAME }}
          git commit -m "Update submodule ${{ env.SUBMODULE_NAME }} to latest from develop"

      - name: Get Cherry-pick commit
        id: cherry
        if: steps.check_changes.outputs.shouldCherryPick == 'true'
        run: |
          if [[ -n "${{ env.SUBMODULE_NAME }}" ]]; then
            # If SUBMODULE_NAME is set
            git reset --soft HEAD~2
            git commit -m "$LAST_COMMIT_MESSAGE"
          fi
          
          # Get the SHA of the current commit (either squashed or not based on the condition above)
          CHERRY_PICK_COMMIT=$(git rev-parse HEAD)
          echo "cherryPickCommit=$CHERRY_PICK_COMMIT" >> $GITHUB_ENV

      - name: Cherry-pick commits
        id: cherry
        if: steps.check_changes.outputs.shouldCherryPick == 'true'
        run: |
          # Checkout the desired branch and cherry-pick the commit  
          git checkout develop
          git checkout -b ${{ env.cherryPickCommit }}
          OUTPUT=$(git cherry-pick ${{ env.cherryPickCommit }} || true)
          
          # Handle conflicts
          CONFLICTED_FILES=$(git diff --name-only --diff-filter=U)
          if [[ "$OUTPUT" == *"CONFLICT"* ]]; then
              # Commit the remaining conflicts
              git commit -am "Commit with unresolved merge conflicts outside of ${{ env.SUBMODULE_NAME }}"
          fi
          
          # Push branch and remove temp
          git push origin ${{ env.newBranchName }} || (echo "Failed to push to origin" && exit 1)
          echo "conflictedFiles=$CONFLICTED_FILES" >> $GITHUB_ENV
          git branch -D temp-branch-for-cherry-pick

      - name: Create PR
        if: steps.check_changes.outputs.shouldCherryPick == 'true'
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BRANCH: ${{ env.newBranchName }}
          PR_ASSIGNEE: ${{ github.event.pull_request.user.login }}
          PR_BODY: "${{ format('Cherry pick from the original PR: \n- #{0}\n\n---- \n\n ⚠️ Conflicts during cherry-pick:\n{1}\n\n{2}', github.event.pull_request.number, env.conflictedFiles, github.event.pull_request.body) }}"
        run: gh pr create --title "$PR_TITLE" --body "$PR_BODY" --base develop --head "$PR_BRANCH" --label "cherry-pick" --assignee "$PR_ASSIGNEE"
